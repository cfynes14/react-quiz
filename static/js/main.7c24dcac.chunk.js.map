{"version":3,"sources":["API.tsx","utils.tsx","components/QuestionCard.styles.ts","components/QuestionCard.tsx","images/alex-diaz.jpg","App.styles.ts","App.tsx","index.tsx"],"names":["Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","console","log","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","callback","userAnswer","questionNumber","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","correctAnswer","disabled","value","onClick","GlobalStyle","createGlobalStyle","BGImage","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","EASY","newQuestions","length","undefined","e","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7c24dcac.chunk.js","sourcesContent":["import { shuffleArray } from './utils';\n\nexport type Question = {\n    category: string;\n    correct_answer: string;\n    difficulty: string;\n    incorrect_answers: string[];\n    question: string;\n    type: string;\n}\n\nexport type QuestionState = Question & { answers: string[] }\n\nexport enum Difficulty {\n    EASY = \"easy\",\n    MEDIUM = \"medium\",\n    HARD = \"hard\"\n}\n\nexport const fetchQuizQuestions = async (amount: number, difficulty: Difficulty) => {\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\n    const data = await (await (await fetch(endpoint))).json();\n    console.log(\"FETCH QUIZ QUESTIONS\", data)\n    return data.results.map((question: Question) => (\n        {\n            ...question,\n            answers: shuffleArray([\n                ...question.incorrect_answers, \n                question.correct_answer,\n            ]),\n        }\n    ))\n}","export const shuffleArray = (array: any[]) => \n    [...array].sort(() => Math.random() - 0.5);\n","import styled from  'styled-components';\n\nexport const Wrapper = styled.div `\n    max-width: 1100px;\n    background: #ebfeff;\n    border-radius: 10px;\n    border: 2px solid #0085a3;\n    padding: 20px;\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n    text-align: center;\n\n    p {\n        font-size: 1rem;\n    }\n\n`\n\ntype ButtonWrapperProps = {\n    correct: boolean;\n    userClicked: boolean;\n}\n\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\n    transition: all 0.3 ease;\n\n    :hover {\n        opacity: 0.8;\n    }\n\n    button {\n        cursor: pointer;\n        user-select: none;\n        font-size: 0.8rem;\n        width: 100%;\n        height: 40px;\n        margin: 5px 0;\n        background: ${({ correct, userClicked }) => \n            correct \n            ? 'linear-gradient(90deg, #56ffa4, #59bc86)'\n            : !correct && userClicked\n            ? 'linear-gradient(90deg, #ff5656, #c16868)'\n            : 'linear-gradient(90deg, #56ccff, #6eafb4)'};\n        border: 3px solid #fff;\n        box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\n        border-radius: 10px;\n        color: #fff;\n        text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\n    }\n`","import React from 'react';\nimport { AnswerObject } from '../App';\n\n// styles \n\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles';\n\ntype Props = {\n    question: string;\n    answers: string[];\n    callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\n    userAnswer: AnswerObject | undefined;\n    questionNumber: number;\n    totalQuestions: number;\n}\n\nconst QuestionCard: React.FC<Props> = ({ question, \n                                        answers,\n                                        callback,\n                                        userAnswer,\n                                        questionNumber, \n                                        totalQuestions\n                                    }) => \n                                        <Wrapper>\n                                            <p className=\"number\">\n                                                Question: {questionNumber} / {totalQuestions}\n                                            </p>\n                                            <p dangerouslySetInnerHTML={{ __html: question}} />\n                                            <div>\n                                                {answers.map(answer => (\n                                                    <ButtonWrapper \n                                                        key={answer}\n                                                        correct={userAnswer?.correctAnswer === answer}\n                                                        userClicked={userAnswer?.answer === answer}\n                                                    >\n                                                        \n                                                        <button disabled={!!userAnswer} value={answer} onClick={callback}>\n                                                            <span dangerouslySetInnerHTML={{ __html: answer }} />\n                                                        </button>\n                                                    </ButtonWrapper>\n                                                ))}\n                                            </div>\n                                        </Wrapper>\n\nexport default QuestionCard;","export default __webpack_public_path__ + \"static/media/alex-diaz.c79a61b2.jpg\";","import styled, { createGlobalStyle } from 'styled-components';\nimport BGImage from './images/alex-diaz.jpg';\n\nexport const GlobalStyle = createGlobalStyle `\n    html {\n        height: 100%;\n    }\n\n    body {\n        background-image: url(${BGImage});\n        background-size: cover;\n        margin: 0;\n        padding: 0 20px;\n        display: flex;\n        justify-content: center;\n    }\n\n    * {\n        box-sizing: border-box;\n        font-family: 'Catamara', sans-serif;\n    }\n\n`\n\nexport const Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\n    > p {\n        color: #fff;\n    }\n\n    .score {\n        color: #fff;\n        font-size: 2rem;\n        margin: 0;\n    }\n\n    h1 {\n        font-familyy: Fascinate Inline;\n        background-image: linear-gradient(180deg, #fff, #87f1ff);\n        background-size: 100%;\n        background-clip: text;\n        -webkit-background-clip: text;\n        -webkit-text-fill-color: transparent;\n        -moz-background-clip: text;\n        -moz-text-fill-color: transparent;\n        filter: drop-shadow(2px 2px #0085a3);\n        font-size: 70px;\n        font-weight: 400;\n        text-align: center;\n        margin: 20px;\n    }\n\n    .start, .next {\n        cursor: pointer;\n        background: linear-gradient(180deg, #fff, #ffcc91);\n        border: 2px solid #d38558;\n        box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n        border-radius: 10px;\n        height: 40px;\n        margin: 20px 0;\n        padding: 0 40px;\n    }\n\n    .start {\n        max-width: 200px;\n    }\n\n`","import React, { useState } from 'react';\nimport { fetchQuizQuestions } from './API';\n//Components\nimport QuestionCard from './components/QuestionCard'\n//Types\nimport { QuestionState, Difficulty } from './API';\n// Styles\nimport { GlobalStyle, Wrapper } from './App.styles';\n\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n}\n\nconst TOTAL_QUESTIONS = 10;\n\nfunction App() {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  const startTrivia = async () => {\n    console.log('starting trivia')\n\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY\n    );\n\n      //INSERT ERROR HANDLING\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n\n      // console.log(answers)\n\n  }\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if(!gameOver) {\n      //User's answer\n      const answer = e.currentTarget.value;\n      //Check answer against correct answers\n      const correct = questions[number].correct_answer === answer;\n      // Add score if answer is correct\n      if (correct) setScore(prev => prev + 1);\n      // Save answer in the array for user answers\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer\n      };\n      setUserAnswers(prev => [...prev, answerObject])\n    }\n  }\n\n  const nextQuestion = () => {\n    //Move on to the next question if not the last question\n\n    const nextQuestion = number + 1;\n\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion)\n    }\n  }\n\n  return (\n    <>\n    <GlobalStyle />\n    <Wrapper>\n      <h1>REACT QUIZ</h1>\n      {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n        <button className=\"start\" onClick={startTrivia}>Start</button> \n      ) : null }\n      {!gameOver ? <p className=\"score\">Score: {score}</p> : null}\n      {loading && <p>Loading Questions ...</p>} \n      {!loading && !gameOver && (\n        \n        <QuestionCard \n         questionNumber={number + 1}\n         totalQuestions={TOTAL_QUESTIONS}\n         question={questions[number].question}\n         answers={questions[number].answers}\n         userAnswer={userAnswers ? userAnswers[number] : undefined}\n         callback={checkAnswer}\n       />\n      )}\n      {!gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS -1 ?\n     ( <button className=\"next\" onClick={nextQuestion}>Next Question </button>\n  ) : null\n      }\n    </Wrapper>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n  \nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root') \n);\n"],"sourceRoot":""}